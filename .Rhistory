paste(my_name, sep=" ")
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
c("X", "Y", "Z")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x*3
y<-rnorm(1000)
z<-rep(NA, 1000)
my_data <- sample(c(y, z), 100)
is.na(my_data)
my_na <- is.na(my_data)
my_na
is.na(my_data)
my_data == NA
sum(my_data)
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
exit
quit
quit()
source('C:/projetos/JiraR/retro.R')
View(bugs)
for(i in 1:dim(bugs)[1]){
print(bugs$Labels[i])
#curLabels <- unlist(strsplit(as.character(bugs$Labels[i]), "[,]"))
#curLabels <- trim(curLabels)
#a["Issue"] = bugs$Key[i]
#for(j in 1:length(curLabels)){
#  a[i, curLabels[j]] <- bugs$Time_Spent[i]
#}
}
curLabelscurLabels)
#a["Issue"] = bugs$Key[i]
#for(j in 1:length(curLabels)){
for(i in 1:dim(bugs)[1]){
curLabels <- unlist(strsplit(as.character(bugs$Labels[i]), "[,]"))
curLabels <- trim(curLabels)
print(curLabels)
#a["Issue"] = bugs$Key[i]
#for(j in 1:length(curLabels)){
#  a[i, curLabels[j]] <- bugs$Time_Spent[i]
#}
}
a <- NULL
a <- NULL
a <- as.data.frame(array(dim = c(dim(bugs)[1], length(labels) + 1)))
names(a) <- c("Issue", labels)
View(a)
for(i in 1:dim(bugs)[1]){
curLabels <- unlist(strsplit(as.character(bugs$Labels[i]), "[,]"))
curLabels <- trim(curLabels)
print(curLabels)
a["Issue"] = bugs$Key[i]
#for(j in 1:length(curLabels)){
#  a[i, curLabels[j]] <- bugs$Time_Spent[i]
#}
}
for(i in 1:dim(bugs)[1]){
curLabels <- unlist(strsplit(as.character(bugs$Labels[i]), "[,]"))
curLabels <- trim(curLabels)
print(curLabels)
a["Issue"] = bugs$Key[i]
for(j in 1:length(curLabels)){
a[curLabels[j], i] <- 1
}
}
a <- NULL
a <- as.data.frame(array(dim = c(dim(bugs)[1], length(labels) + 1)))
names(a) <- c("Issue", labels)
View(a)
for(i in 1:dim(bugs)[1]){
curLabels <- unlist(strsplit(as.character(bugs$Labels[i]), "[,]"))
curLabels <- trim(curLabels)
print(curLabels)
a["Issue"] = bugs$Key[i]
for(j in 1:length(curLabels)){
a[curLabels[j], i] <- 1
}
}
View(a)
for(i in 1:dim(bugs)[1]){
curLabels <- unlist(strsplit(as.character(bugs$Labels[i]), "[,]"))
curLabels <- trim(curLabels)
a["Issue"] = bugs$Key[i]
for(j in 1:length(curLabels)){
print(curLabels[j])
a[i, curLabels[j]] <- 1
}
}
View(a)
a <- NULL
a <- as.data.frame(array(dim = c(dim(bugs)[1], length(labels) + 1)))
names(a) <- c("Issue", labels)
View(a)
for(i in 1:dim(bugs)[1]){
curLabels <- unlist(strsplit(as.character(bugs$Labels[i]), "[,]"))
curLabels <- trim(curLabels)
a["Issue"] = bugs$Key[i]
for(j in 1:length(curLabels)){
print(curLabels[j])
a[i, curLabels[j]] <- 1
}
}
View(a)
a <- NULL
a <- as.data.frame(array(dim = c(dim(bugs)[1], length(labels) + 1)))
for(i in 1:dim(bugs)[1]){
curLabels <- unlist(strsplit(as.character(bugs$Labels[i]), "[,]"))
curLabels <- trim(curLabels)
a["Issue"] = bugs$Key[i]
for(j in 1:length(curLabels)){
a[1, curLabels[j]] <- a[1, curLabels[j]] + 1
}
}
a <- NULL
a <- as.data.frame(array(dim = c(dim(bugs)[1], length(labels) + 1)))
names(a) <- c("Issue", labels)
for(i in 1:dim(bugs)[1]){
curLabels <- unlist(strsplit(as.character(bugs$Labels[i]), "[,]"))
curLabels <- trim(curLabels)
a["Issue"] = bugs$Key[i]
for(j in 1:length(curLabels)){
a[1, curLabels[j]] <- 1
}
}
View(a)
source('C:/projetos/JiraR/retro.R')
a$FIX-Tier-Model
a["FIX-Tier-Model"]
names(a)
unique(names(a))
source('C:/projetos/JiraR/retro.R')
a <- NULL
a <- as.data.frame({}) # array(dim = c(dim(bugs)[1], length(labels) + 1)))
names(a) <- c("Issue", labels)
source('C:/projetos/JiraR/retro.R')
a <- as.data.frame({}) # array(dim = c(dim(bugs)[1], length(labels) + 1)))
for(i in 1:dim(bugs)[1]){
curLabels <- unlist(strsplit(as.character(bugs$Labels[i]), "[,]"))
curLabels <- gsub("-", "_", trim(curLabels))
a["Issue"] = bugs$Key[i]
for(j in 1:length(curLabels)){
a[i, curLabels[j]] <- bugs$Time_Spent[i]
}
}
source('C:/projetos/JiraR/retro.R')
source('C:/projetos/JiraR/retro.R')
source('C:/projetos/JiraR/retro.R')
View(bugs)
bugs
bugs$Key
dim(bugs)
dim(bugs)[1]
for(i in 1:dim(bugs)[1]){
curLabels <- unlist(strsplit(as.character(bugs$Labels[i]), "[,]"))
curLabels <- trim(curLabels)
a[i, "Issue"] = bugs$Key[1]
#for(j in 1:length(curLabels)){
#  a[i, curLabels[j]] <- bugs$Time_Spent[i]
#}
}
View(a)
bugs <- as.data.frame(issueData[issueData$Issue_Type=="Sub-Bug",])
source('C:/projetos/JiraR/retro.R')
source('C:/projetos/JiraR/retro.R')
View(bugs)
bugs$Key[1]
as.character(bugs$Key[1])
as.character(bugs$Key[2])
source('C:/projetos/JiraR/retro.R')
source('C:/projetos/JiraR/retro.R')
source('C:/projetos/JiraR/retro.R')
source('~/.active-rstudio-document')
source('C:/projetos/JiraR/retro.R')
a <- NULL
a <- as.data.frame(array(dim = c(dim(bugs)[1], length(labels) + 1)))
names(a) <- c("Issue", labels)
View(a)
labels <- unique(as.character(gsub("/", "", trim(labels))))
a <- NULL
a <- as.data.frame(array(dim = c(dim(bugs)[1], length(labels) + 1)))
names(a) <- c("Issue", labels)
View(a)
source('C:/projetos/JiraR/retro.R')
cor(a)
corr(a)
cor(a)
?cor
source('C:/projetos/JiraR/retro.R')
cor(a)
cor(x = a)
cor(a)
cor(a[2:5])
cor(a[-1])
plot(cor(a[-1]))
a
View(a)
View(a[-1])
View(cor(a[-1]))
library(swirl)
swirl()
my_vector <- 1:20
my_vector
dim(x = my_vector)
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
matrix(my_matrix)
my_matrix2 <- matrix(my_matrix)
my_matrix2 <- matrix(data = my_matrix)
my_matrix2 <- matrix(data = 1:20, nrow = 4, ncol = 5)
identical(x = my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_data)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", 'weight', "bp", "rating", "test")
colnames(my_data)
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6<7
10 <= 10
5 != 7
5 ! 7
5 != 7
5 == 7
!5 == 7
TRUE
FALSE & FALSE
c(TRUE, FALSE, FALSE)
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical("twins", "twins")
xor(5 ==6, !FALSE)
sample(10)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2, 4,5))
submit()
boring_function("My first function!")
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
submit()
submit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num=5)
remainder(4, div=2)
args(remainder)
submit()
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(mean, c(1.4, 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x}, c(8, 4, 0))
remainder <- function(num
)
)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("a")
submit()
mad_libs(place = "London", adjustive = "beautiful", noun = "dog")
submit()
"I" %p% "love" %p% "R!"
head(flags)
dim(flags)
class(flags)?
)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
class(cls_vect)
class(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, class)
vapply(flags, class, character(1))
sapply(flags, class)
sapply(flags, unique)
vapply(flags, class, character(1))
vapply(flags, unique, character(1))
vapply(flags, unique, numeric(1))
1
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
swirl()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, n = 10)
tail()
tail(plants)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
sample()
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:10, 4)
sample(1:10, 10)
sample(1:20,10)
LETTERS
sample(LETTERS)
sample(c(0,1))
sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0, 1), 100, replace = TRUE, prob = c(.3, .7))
flips
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
unclass(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4< -strptime(t3, "%B %d, %Y %H:%M")
t4<- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data(mtcars)
?boxplot
oxplot(formula = mpg ~ cyl, data = mtcars)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
plot(p)
library(datasets)
data(airquality)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality)
install.packages("ggplot2")
library("ggplot2", lib.loc="C:/Program Files/R/R-3.2.0/library")
qplot(Wind, Ozone, data = airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
install.packages("knitr")
source('~/.active-rstudio-document', echo=TRUE)
View(void.values)
void.values <- which(is.na(activity$steps))
View(void.values)
for(i in 1:length(void.values)){
activity$date[void.values]
}
activity[0,]
activity[1,]
activity[activity$date='2012-10-01']
activity[activity$date == '2012-10-01']
activity[activity$date == as.Date('2012-10-01')]
activity[activity$date == as.Date('2012-10-01'),]
activity[activity$date == as.Date('2012-10-01'),]$steps
View(activity)
activity[activity$date == as.Date('2012-10-03'),]$steps
activity[activity$date == as.Date('2012-10-01'),]$steps
